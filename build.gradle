plugins {
	id 'org.springframework.boot' version '2.5.3'
	id 'io.spring.dependency-management' version '1.0.11.RELEASE'
	id 'org.asciidoctor.jvm.convert' version '3.3.2'
	id 'groovy'
	id 'java'
	id 'checkstyle'
	id 'jacoco'
	id 'java-test-fixtures'
	id 'com.dorongold.task-tree' version '2.1.0'
}

group = 'kr.flab'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

ext {
	set('snippetsDir', file("build/generated-snippets"))
	set('testcontainersVersion', "1.15.3")
}

// CheckStyle Configurations

checkstyle {
	maxWarnings = 0
	configFile = file("${rootDir}/coding-style/google-checkstyle.xml")
	configProperties = ["suppressionFile" : "${rootDir}/coding-style/checkstyle-suppressions.xml"]
    sourceSets = [project.sourceSets.main]
	showViolations = true
	toolVersion = "8.45"
}

task preCheckStyle() {
	copy {
		from "./githooks/pre-commit"
		into "./.git/hooks"
	}
}

checkstyleMain.dependsOn preCheckStyle

// Jacoco Configurations

def jacocoExcludes = [
	'**/mybatis/typehandler/**',
	'**/FreamApplication.class'
]

tasks.jacocoTestReport {
	executionData(fileTree(project.buildDir).include("jacoco/*.exec"))

	reports {
		csv.enabled(true)
	}
	afterEvaluate {
		getClassDirectories().setFrom(classDirectories.files.collect {
			fileTree(dir: it, exclude: jacocoExcludes)
		})
	}
}

jacocoTestCoverageVerification {
	executionData(fileTree(project.buildDir).include("jacoco/*.exec"))

	violationRules {
		rule {
			element = 'CLASS'
			limit {
				counter = 'BRANCH'
				minimum = 1.0
			}
		}
		rule {
			element = 'CLASS'
			limit {
				counter = 'LINE'
				minimum = 1.0
			}
		}
	}
	afterEvaluate {
		getClassDirectories().setFrom(classDirectories.files.collect {
			fileTree(dir: it, exclude: jacocoExcludes)
		})
	}
}

test.finalizedBy jacocoTestReport
check.dependsOn jacocoTestCoverageVerification

dependencies {

	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.flywaydb:flyway-core'
	implementation 'org.mybatis.spring.boot:mybatis-spring-boot-starter:2.2.0'
	implementation 'org.mybatis:mybatis-typehandlers-jsr310:1.0.2'
	implementation 'org.codehaus.groovy:groovy:3.0.8'
	implementation 'org.modelmapper:modelmapper:2.4.4'
	implementation 'com.google.code.findbugs:jsr305:3.0.2'
	implementation 'org.mindrot:jbcrypt:0.4'

	compileOnly 'org.projectlombok:lombok'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	runtimeOnly 'mysql:mysql-connector-java'
	annotationProcessor 'org.projectlombok:lombok'

	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.mybatis.spring.boot:mybatis-spring-boot-starter-test:2.2.0'
	testImplementation 'org.testcontainers:mysql'
	testImplementation 'org.testcontainers:spock:1.15.3'
	testImplementation 'org.spockframework:spock-core:2.0-groovy-3.0'
	testImplementation 'org.spockframework:spock-spring:2.0-groovy-3.0'
	testImplementation 'org.spockframework:spock-junit4:2.0-groovy-3.0'
	testImplementation 'org.assertj:assertj-core:3.19.0'

}

dependencyManagement {
	imports {
		mavenBom "org.testcontainers:testcontainers-bom:${testcontainersVersion}"
	}
}

test {
	outputs.dir snippetsDir
	useJUnitPlatform()
	jacoco {
		excludes += jacocoExcludes
	}
}

tasks.withType(Test) {
	useJUnitPlatform()
	testLogging {
		events = ["passed", "failed", "skipped"]
		exceptionFormat = "full"
	}
}

asciidoctor {
	inputs.dir snippetsDir
	dependsOn test
}
